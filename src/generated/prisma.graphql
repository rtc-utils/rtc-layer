# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type ConferenceRoom implements Node {
  id: ID!
  title: String!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
  createdBy: ID
}

type Message implements Node {
  id: ID!
  conferenceRoomId: ID!
  text: String
  createdBy(where: UserWhereInput): User
  createdAt: DateTime!
}

type User implements Node {
  id: ID!
  displayName: String!
}


#
# Other Types
#

type AggregateConferenceRoom {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type ConferenceRoomConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ConferenceRoomEdge]!
  aggregate: AggregateConferenceRoom!
}

input ConferenceRoomCreateInput {
  title: String!
  createdBy: ID
  participants: UserCreateManyInput
  messages: MessageCreateManyInput
}

"""
An edge in a connection.
"""
type ConferenceRoomEdge {
  """
  The item at the end of the edge.
  """
  node: ConferenceRoom!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ConferenceRoomOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  createdBy_ASC
  createdBy_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConferenceRoomPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  createdBy: ID
}

type ConferenceRoomSubscriptionPayload {
  mutation: MutationType!
  node: ConferenceRoom
  updatedFields: [String!]
  previousValues: ConferenceRoomPreviousValues
}

input ConferenceRoomSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConferenceRoomSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConferenceRoomSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConferenceRoomWhereInput
}

input ConferenceRoomUpdateInput {
  title: String
  createdBy: ID
  participants: UserUpdateManyInput
  messages: MessageUpdateManyInput
}

input ConferenceRoomWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ConferenceRoomWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ConferenceRoomWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  createdBy: ID
  """
  All values that are not equal to given value.
  """
  createdBy_not: ID
  """
  All values that are contained in given list.
  """
  createdBy_in: [ID!]
  """
  All values that are not contained in given list.
  """
  createdBy_not_in: [ID!]
  """
  All values less than the given value.
  """
  createdBy_lt: ID
  """
  All values less than or equal the given value.
  """
  createdBy_lte: ID
  """
  All values greater than the given value.
  """
  createdBy_gt: ID
  """
  All values greater than or equal the given value.
  """
  createdBy_gte: ID
  """
  All values containing the given string.
  """
  createdBy_contains: ID
  """
  All values not containing the given string.
  """
  createdBy_not_contains: ID
  """
  All values starting with the given string.
  """
  createdBy_starts_with: ID
  """
  All values not starting with the given string.
  """
  createdBy_not_starts_with: ID
  """
  All values ending with the given string.
  """
  createdBy_ends_with: ID
  """
  All values not ending with the given string.
  """
  createdBy_not_ends_with: ID
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input ConferenceRoomWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type MessageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  conferenceRoomId: ID!
  text: String
  createdBy: UserCreateOneInput
}

input MessageCreateManyInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type MessageEdge {
  """
  The item at the end of the edge.
  """
  node: Message!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  conferenceRoomId_ASC
  conferenceRoomId_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  conferenceRoomId: ID!
  text: String
  createdAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MessageSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MessageSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateDataInput {
  conferenceRoomId: ID
  text: String
  createdBy: UserUpdateOneInput
}

input MessageUpdateInput {
  conferenceRoomId: ID
  text: String
  createdBy: UserUpdateOneInput
}

input MessageUpdateManyInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueNestedInput!]
}

input MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateDataInput!
}

input MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateDataInput!
  create: MessageCreateInput!
}

input MessageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MessageWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MessageWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  conferenceRoomId: ID
  """
  All values that are not equal to given value.
  """
  conferenceRoomId_not: ID
  """
  All values that are contained in given list.
  """
  conferenceRoomId_in: [ID!]
  """
  All values that are not contained in given list.
  """
  conferenceRoomId_not_in: [ID!]
  """
  All values less than the given value.
  """
  conferenceRoomId_lt: ID
  """
  All values less than or equal the given value.
  """
  conferenceRoomId_lte: ID
  """
  All values greater than the given value.
  """
  conferenceRoomId_gt: ID
  """
  All values greater than or equal the given value.
  """
  conferenceRoomId_gte: ID
  """
  All values containing the given string.
  """
  conferenceRoomId_contains: ID
  """
  All values not containing the given string.
  """
  conferenceRoomId_not_contains: ID
  """
  All values starting with the given string.
  """
  conferenceRoomId_starts_with: ID
  """
  All values not starting with the given string.
  """
  conferenceRoomId_not_starts_with: ID
  """
  All values ending with the given string.
  """
  conferenceRoomId_ends_with: ID
  """
  All values not ending with the given string.
  """
  conferenceRoomId_not_ends_with: ID
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  createdBy: UserWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createConferenceRoom(data: ConferenceRoomCreateInput!): ConferenceRoom!
  createUser(data: UserCreateInput!): User!
  createMessage(data: MessageCreateInput!): Message!
  createToken(data: TokenCreateInput!): Token!
  updateConferenceRoom(data: ConferenceRoomUpdateInput!, where: ConferenceRoomWhereUniqueInput!): ConferenceRoom
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  deleteConferenceRoom(where: ConferenceRoomWhereUniqueInput!): ConferenceRoom
  deleteUser(where: UserWhereUniqueInput!): User
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteToken(where: TokenWhereUniqueInput!): Token
  upsertConferenceRoom(where: ConferenceRoomWhereUniqueInput!, create: ConferenceRoomCreateInput!, update: ConferenceRoomUpdateInput!): ConferenceRoom!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  updateManyConferenceRooms(data: ConferenceRoomUpdateInput!, where: ConferenceRoomWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput): BatchPayload!
  updateManyTokens(data: TokenUpdateInput!, where: TokenWhereInput): BatchPayload!
  deleteManyConferenceRooms(where: ConferenceRoomWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  conferenceRooms(where: ConferenceRoomWhereInput, orderBy: ConferenceRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConferenceRoom]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  conferenceRoom(where: ConferenceRoomWhereUniqueInput!): ConferenceRoom
  user(where: UserWhereUniqueInput!): User
  message(where: MessageWhereUniqueInput!): Message
  token(where: TokenWhereUniqueInput!): Token
  conferenceRoomsConnection(where: ConferenceRoomWhereInput, orderBy: ConferenceRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConferenceRoomConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  conferenceRoom(where: ConferenceRoomSubscriptionWhereInput): ConferenceRoomSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
}

type Token {
  identity: ID!
  token: ID
}

"""
A connection to a list of items.
"""
type TokenConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  identity: ID!
  token: ID
}

"""
An edge in a connection.
"""
type TokenEdge {
  """
  The item at the end of the edge.
  """
  node: Token!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TokenOrderByInput {
  identity_ASC
  identity_DESC
  token_ASC
  token_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TokenPreviousValues {
  identity: ID!
  token: ID
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TokenSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TokenSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
}

input TokenUpdateInput {
  identity: ID
  token: ID
}

input TokenWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TokenWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TokenWhereInput!]
  identity: ID
  """
  All values that are not equal to given value.
  """
  identity_not: ID
  """
  All values that are contained in given list.
  """
  identity_in: [ID!]
  """
  All values that are not contained in given list.
  """
  identity_not_in: [ID!]
  """
  All values less than the given value.
  """
  identity_lt: ID
  """
  All values less than or equal the given value.
  """
  identity_lte: ID
  """
  All values greater than the given value.
  """
  identity_gt: ID
  """
  All values greater than or equal the given value.
  """
  identity_gte: ID
  """
  All values containing the given string.
  """
  identity_contains: ID
  """
  All values not containing the given string.
  """
  identity_not_contains: ID
  """
  All values starting with the given string.
  """
  identity_starts_with: ID
  """
  All values not starting with the given string.
  """
  identity_not_starts_with: ID
  """
  All values ending with the given string.
  """
  identity_ends_with: ID
  """
  All values not ending with the given string.
  """
  identity_not_ends_with: ID
  token: ID
  """
  All values that are not equal to given value.
  """
  token_not: ID
  """
  All values that are contained in given list.
  """
  token_in: [ID!]
  """
  All values that are not contained in given list.
  """
  token_not_in: [ID!]
  """
  All values less than the given value.
  """
  token_lt: ID
  """
  All values less than or equal the given value.
  """
  token_lte: ID
  """
  All values greater than the given value.
  """
  token_gt: ID
  """
  All values greater than or equal the given value.
  """
  token_gte: ID
  """
  All values containing the given string.
  """
  token_contains: ID
  """
  All values not containing the given string.
  """
  token_not_contains: ID
  """
  All values starting with the given string.
  """
  token_starts_with: ID
  """
  All values not starting with the given string.
  """
  token_not_starts_with: ID
  """
  All values ending with the given string.
  """
  token_ends_with: ID
  """
  All values not ending with the given string.
  """
  token_not_ends_with: ID
}

input TokenWhereUniqueInput {
  identity: ID
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  displayName: String!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  displayName_ASC
  displayName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  displayName: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  displayName: String
}

input UserUpdateInput {
  displayName: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  displayName: String
  """
  All values that are not equal to given value.
  """
  displayName_not: String
  """
  All values that are contained in given list.
  """
  displayName_in: [String!]
  """
  All values that are not contained in given list.
  """
  displayName_not_in: [String!]
  """
  All values less than the given value.
  """
  displayName_lt: String
  """
  All values less than or equal the given value.
  """
  displayName_lte: String
  """
  All values greater than the given value.
  """
  displayName_gt: String
  """
  All values greater than or equal the given value.
  """
  displayName_gte: String
  """
  All values containing the given string.
  """
  displayName_contains: String
  """
  All values not containing the given string.
  """
  displayName_not_contains: String
  """
  All values starting with the given string.
  """
  displayName_starts_with: String
  """
  All values not starting with the given string.
  """
  displayName_not_starts_with: String
  """
  All values ending with the given string.
  """
  displayName_ends_with: String
  """
  All values not ending with the given string.
  """
  displayName_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
